{"version":3,"sources":["components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","components/PostsList.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","NewCommentForm","onAddComment","postId","useState","name","email","comment","formErrors","setFormErrors","isAddingComment","setIsAddingComment","body","setComment","errorsCheck","errors","trim","Object","values","every","error","handleChange","e","currentTarget","value","postComment","a","preventDefault","newComment","Error","onSubmit","htmlFor","type","id","placeholder","classNames","onChange","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","PostDetails","post","title","comments","setComments","isLoading","setIsLoading","loadError","setLoadError","setError","deleteError","setDeleteError","isFormVisible","setIsFormVisible","addNewComment","useCallback","addedComment","currentComment","deleteSelectedComment","tempComments","currentComments","filter","useEffect","fetchPostComments","commentsFromServer","deleteErrorTimer","clearTimeout","addErrorTimer","length","map","href","UserSelector","React","memo","users","selectedUser","selectUser","listIsOpen","setListIsOpen","dropdownRef","useRef","dropdownMenuStyle","display","handleClick","event","current","contains","target","window","addEventListener","removeEventListener","ref","role","style","user","userId","foundUser","find","handleSelectUser","PostsList","selectedUserId","selectedPost","selectPost","posts","setPosts","getUserPostsFromServer","postsFromServer","openedPost","handleSelectPost","App","setUsers","setSelectedUser","setSelectedPost","getUserList","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10c2bf1c.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (commnet: CommentData) => Promise<void>;\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment, postId }) => {\n  const [formErrors, setFormErrors] = useState({\n    name: false,\n    email: false,\n    comment: false,\n  });\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const [comment, setComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const errorsCheck = () => {\n    const errors = {\n      name: !comment.name.trim(),\n      email: !comment.email.trim(),\n      comment: !comment.body.trim(),\n    };\n\n    setFormErrors(errors);\n\n    return Object.values(errors).every(error => !error);\n  };\n\n  const clearAll = () => {\n    setFormErrors({\n      name: false,\n      email: false,\n      comment: false,\n    });\n    setComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.currentTarget;\n\n    setComment({ ...comment, [name]: value });\n  };\n\n  const postComment = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    errorsCheck();\n\n    if (comment) {\n      try {\n        setIsAddingComment(true);\n\n        const newComment = {\n          name: comment.name,\n          email: comment.email,\n          body: comment.body,\n          postId,\n        };\n\n        await onAddComment(newComment);\n      } catch {\n        throw new Error('Can\\'t add new comment');\n      } finally {\n        setIsAddingComment(false);\n        setComment({ ...comment, body: '' });\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={postComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': formErrors.name },\n            )}\n            value={comment.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': formErrors.email },\n            )}\n            value={comment.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': formErrors.comment },\n            )}\n            value={comment.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {formErrors.comment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isAddingComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearAll}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { CommentData } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: CommentData | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(\n    url: string, data: CommentData | null,\n  ) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const postComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { deleteComment, getComments, postComment } from '../api/comments';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadError, setLoadError] = useState(false);\n  const [error, setError] = useState(false);\n  const [deleteError, setDeleteError] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  const addNewComment = useCallback(async (comment: CommentData) => {\n    const newComment = { ...comment };\n\n    try {\n      const addedComment = await postComment(newComment);\n\n      setComments(currentComment => [...currentComment, addedComment]);\n    } catch {\n      setError(true);\n    }\n  }, []);\n\n  const deleteSelectedComment = useCallback(async (commentId: number) => {\n    const tempComments = [...comments];\n\n    setComments(currentComments => (\n      currentComments.filter(comment => comment.id !== commentId)\n    ));\n\n    try {\n      setDeleteError(false);\n      await deleteComment(commentId);\n    } catch {\n      setComments(tempComments);\n      setDeleteError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchPostComments = async () => {\n      try {\n        setComments([]);\n        setIsFormVisible(false);\n        setLoadError(false);\n        setIsLoading(true);\n        const commentsFromServer = await getComments(post.id);\n\n        setComments(commentsFromServer);\n      } catch {\n        setLoadError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPostComments();\n  }, [post.id]);\n\n  useEffect(() => {\n    const deleteErrorTimer = setTimeout(() => {\n      setDeleteError(false);\n    }, 3000);\n\n    return () => clearTimeout(deleteErrorTimer);\n  }, [deleteError]);\n\n  useEffect(() => {\n    const addErrorTimer = setTimeout(() => {\n      setError(false);\n    }, 3000);\n\n    return () => clearTimeout(addErrorTimer);\n  }, [error]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${id}: ${title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n\n        {loadError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            {!comments.length ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    key={comment.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => deleteSelectedComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )}\n            {error && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"CommentsError\"\n              >\n                Can&apos;t add new comment\n              </div>\n            )}\n\n            {deleteError && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"CommentsError\"\n              >\n                Can&apos;t delete comment\n              </div>\n            )}\n\n            {!isFormVisible ? (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsFormVisible(true)}\n              >\n                Write a comment\n              </button>\n            ) : (\n              <NewCommentForm\n                onAddComment={addNewComment}\n                postId={id}\n              />\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  selectUser: (user: User | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [listIsOpen, setListIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  const dropdownMenuStyle = {\n    display: listIsOpen ? 'block' : 'none',\n  };\n\n  const handleSelectUser = (userId: number) => {\n    const foundUser = users.find(user => user.id === userId) || null;\n\n    selectUser(foundUser);\n    setListIsOpen(false);\n  };\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (\n        dropdownRef.current\n        && !dropdownRef.current.contains(event.target as ChildNode)\n      ) {\n        setListIsOpen(false);\n      }\n    };\n\n    window.addEventListener('mousedown', handleClick);\n\n    return () => window.removeEventListener('mousedown', handleClick);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is - active': listIsOpen },\n      )}\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setListIsOpen(!listIsOpen)}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        style={dropdownMenuStyle}\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onClick={() => handleSelectUser(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { getUserPosts } from '../api/posts';\nimport { Loader } from './Loader';\n\ntype Props = {\n  selectedUserId: number,\n  selectedPost: Post | null,\n  selectPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPost,\n  selectPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleSelectPost = (postId: number) => {\n    if (selectedPost?.id !== postId) {\n      const openedPost = posts.find(post => post.id === postId) || null;\n\n      selectPost(openedPost);\n    } else {\n      selectPost(null);\n    }\n  };\n\n  useEffect(() => {\n    const getUserPostsFromServer = async () => {\n      try {\n        selectPost(null);\n        setIsLoading(true);\n        setError(false);\n        const postsFromServer = await getUserPosts(selectedUserId);\n\n        setPosts(postsFromServer);\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserPostsFromServer();\n  }, [selectedUserId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!posts.length) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => handleSelectPost(post.id)}\n                >\n                  {selectedPost?.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { PostsList } from './components/PostsList';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const handleSelectUser = useCallback((user) => {\n    setSelectedUser(user);\n  }, []);\n\n  const handleSelectPost = useCallback((post) => {\n    setSelectedPost(post);\n  }, []);\n\n  const getUserList = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      throw new Error('Can\\'t load users');\n    }\n  };\n\n  useEffect(() => {\n    getUserList();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser ? (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                ) : (\n                  <PostsList\n                    selectedUserId={selectedUser.id}\n                    selectedPost={selectedPost}\n                    selectPost={handleSelectPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}